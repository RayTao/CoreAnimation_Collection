// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import UIKit

struct R {
  static func validate() {
    storyboard.launchScreen.validateImages()
    storyboard.launchScreen.validateViewControllers()
  }
  
  struct file {
    static var shipMp4: NSURL? { return _R.hostingBundle?.URLForResource("Ship", withExtension: "mp4") }
    static var tile_floorPng: NSURL? { return _R.hostingBundle?.URLForResource("tile_floor", withExtension: "png") }
  }
  
  struct font {
    
  }
  
  struct image {
    static var anchor: UIImage? { return UIImage(named: "Anchor", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ball: UIImage? { return UIImage(named: "Ball", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var bigSnowman: UIImage? { return UIImage(named: "BigSnowman", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var button: UIImage? { return UIImage(named: "Button", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var chalk: UIImage? { return UIImage(named: "Chalk", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var clockFace: UIImage? { return UIImage(named: "ClockFace", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var cone: UIImage? { return UIImage(named: "Cone", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var digits: UIImage? { return UIImage(named: "Digits", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var door: UIImage? { return UIImage(named: "Door", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var hourHand: UIImage? { return UIImage(named: "HourHand", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var igloo: UIImage? { return UIImage(named: "Igloo", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var minuteHand: UIImage? { return UIImage(named: "MinuteHand", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var secondHand: UIImage? { return UIImage(named: "SecondHand", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var ship: UIImage? { return UIImage(named: "Ship", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman: UIImage? { return UIImage(named: "Snowman", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_00: UIImage? { return UIImage(named: "Snowman_00_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_01: UIImage? { return UIImage(named: "Snowman_00_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_02: UIImage? { return UIImage(named: "Snowman_00_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_03: UIImage? { return UIImage(named: "Snowman_00_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_04: UIImage? { return UIImage(named: "Snowman_00_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_05: UIImage? { return UIImage(named: "Snowman_00_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_06: UIImage? { return UIImage(named: "Snowman_00_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_00_07: UIImage? { return UIImage(named: "Snowman_00_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_00: UIImage? { return UIImage(named: "Snowman_01_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_01: UIImage? { return UIImage(named: "Snowman_01_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_02: UIImage? { return UIImage(named: "Snowman_01_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_03: UIImage? { return UIImage(named: "Snowman_01_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_04: UIImage? { return UIImage(named: "Snowman_01_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_05: UIImage? { return UIImage(named: "Snowman_01_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_06: UIImage? { return UIImage(named: "Snowman_01_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_01_07: UIImage? { return UIImage(named: "Snowman_01_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_00: UIImage? { return UIImage(named: "Snowman_02_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_01: UIImage? { return UIImage(named: "Snowman_02_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_02: UIImage? { return UIImage(named: "Snowman_02_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_03: UIImage? { return UIImage(named: "Snowman_02_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_04: UIImage? { return UIImage(named: "Snowman_02_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_05: UIImage? { return UIImage(named: "Snowman_02_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_06: UIImage? { return UIImage(named: "Snowman_02_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_02_07: UIImage? { return UIImage(named: "Snowman_02_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_00: UIImage? { return UIImage(named: "Snowman_03_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_01: UIImage? { return UIImage(named: "Snowman_03_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_02: UIImage? { return UIImage(named: "Snowman_03_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_03: UIImage? { return UIImage(named: "Snowman_03_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_04: UIImage? { return UIImage(named: "Snowman_03_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_05: UIImage? { return UIImage(named: "Snowman_03_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_06: UIImage? { return UIImage(named: "Snowman_03_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_03_07: UIImage? { return UIImage(named: "Snowman_03_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_00: UIImage? { return UIImage(named: "Snowman_04_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_01: UIImage? { return UIImage(named: "Snowman_04_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_02: UIImage? { return UIImage(named: "Snowman_04_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_03: UIImage? { return UIImage(named: "Snowman_04_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_04: UIImage? { return UIImage(named: "Snowman_04_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_05: UIImage? { return UIImage(named: "Snowman_04_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_06: UIImage? { return UIImage(named: "Snowman_04_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_04_07: UIImage? { return UIImage(named: "Snowman_04_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_00: UIImage? { return UIImage(named: "Snowman_05_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_01: UIImage? { return UIImage(named: "Snowman_05_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_02: UIImage? { return UIImage(named: "Snowman_05_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_03: UIImage? { return UIImage(named: "Snowman_05_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_04: UIImage? { return UIImage(named: "Snowman_05_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_05: UIImage? { return UIImage(named: "Snowman_05_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_06: UIImage? { return UIImage(named: "Snowman_05_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_05_07: UIImage? { return UIImage(named: "Snowman_05_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_00: UIImage? { return UIImage(named: "Snowman_06_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_01: UIImage? { return UIImage(named: "Snowman_06_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_02: UIImage? { return UIImage(named: "Snowman_06_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_03: UIImage? { return UIImage(named: "Snowman_06_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_04: UIImage? { return UIImage(named: "Snowman_06_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_05: UIImage? { return UIImage(named: "Snowman_06_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_06: UIImage? { return UIImage(named: "Snowman_06_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_06_07: UIImage? { return UIImage(named: "Snowman_06_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_00: UIImage? { return UIImage(named: "Snowman_07_00", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_01: UIImage? { return UIImage(named: "Snowman_07_01", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_02: UIImage? { return UIImage(named: "Snowman_07_02", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_03: UIImage? { return UIImage(named: "Snowman_07_03", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_04: UIImage? { return UIImage(named: "Snowman_07_04", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_05: UIImage? { return UIImage(named: "Snowman_07_05", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_06: UIImage? { return UIImage(named: "Snowman_07_06", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var snowman_07_07: UIImage? { return UIImage(named: "Snowman_07_07", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var spaceship: UIImage? { return UIImage(named: "Spaceship", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var spark: UIImage? { return UIImage(named: "Spark", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var sprites: UIImage? { return UIImage(named: "Sprites", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
    static var tile_floor: UIImage? { return UIImage(named: "tile_floor", inBundle: _R.hostingBundle, compatibleWithTraitCollection: nil) }
  }
  
  struct nib {
    static var switchersCollectionViewController: _R.nib._SwitchersCollectionViewController { return _R.nib._SwitchersCollectionViewController() }
  }
  
  struct reuseIdentifier {
    
  }
  
  struct segue {
    
  }
  
  struct storyboard {
    struct launchScreen {
      static var initialViewController: UIViewController? { return instance.instantiateInitialViewController() }
      static var instance: UIStoryboard { return UIStoryboard(name: "LaunchScreen", bundle: _R.hostingBundle) }
      
      static func validateImages() {
        
      }
      
      static func validateViewControllers() {
        
      }
    }
  }
}

struct _R {
  static var hostingBundle: NSBundle? { return NSBundle(identifier: "com.Ray.CoreAnimation-Collection") }
  
  struct nib {
    struct _SwitchersCollectionViewController: NibResource {
      var instance: UINib { return UINib.init(nibName: "SwitchersCollectionViewController", bundle: _R.hostingBundle) }
      var name: String { return "SwitchersCollectionViewController" }
      
      func firstView(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      func instantiateWithOwner(ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]?) -> [AnyObject] {
        return instance.instantiateWithOwner(ownerOrNil, options: optionsOrNil)
      }
    }
  }
}

struct ReuseIdentifier<T>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct StoryboardSegueIdentifier<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let identifier: String
  
  var description: String { return identifier }
}

struct TypedStoryboardSegueInfo<Segue: UIStoryboardSegue, Source: UIViewController, Destination: UIViewController>: CustomStringConvertible {
  let destinationViewController: Destination
  let identifier: String?
  let segue: Segue
  let sourceViewController: Source
  
  var description: String { return identifier ?? "" }
  
   init?(segue: UIStoryboardSegue) {
    guard let segue = segue as? Segue, sourceViewController = segue.sourceViewController as? Source, destinationViewController = segue.destinationViewController as? Destination else { return nil }
    self.segue = segue
    self.identifier = segue.identifier
    self.sourceViewController = sourceViewController
    self.destinationViewController = destinationViewController
  }
}

protocol NibResource {
  var instance: UINib { get }
  var name: String { get }
}

protocol Reusable {
  typealias T
  
  var reuseIdentifier: ReuseIdentifier<T> { get }
}

extension UITableView {
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath?) -> T? {
    if let indexPath = indexPath {
      return dequeueReusableCellWithIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
    }
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableCellWithIdentifier<T : UITableViewCell>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableCellWithIdentifier(identifier.identifier) as? T
  }
  
  func dequeueReusableHeaderFooterViewWithIdentifier<T : UITableViewHeaderFooterView>(identifier: ReuseIdentifier<T>) -> T? {
    return dequeueReusableHeaderFooterViewWithIdentifier(identifier.identifier) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibForHeaderFooterView<T: NibResource where T: Reusable, T.T: UIView>(nibResource: T) {
    registerNib(nibResource.instance, forHeaderFooterViewReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UITableViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<T: UICollectionViewCell>(identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableCellWithReuseIdentifier(identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func dequeueReusableSupplementaryViewOfKind<T: UICollectionReusableView>(elementKind: String, withReuseIdentifier identifier: ReuseIdentifier<T>, forIndexPath indexPath: NSIndexPath) -> T? {
    return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier.identifier, forIndexPath: indexPath) as? T
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResource: T) {
    registerNib(nibResource.instance, forCellWithReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNib<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResource: T, forSupplementaryViewOfKind kind: String) {
    registerNib(nibResource.instance, forSupplementaryViewOfKind: kind, withReuseIdentifier: nibResource.reuseIdentifier.identifier)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionViewCell>(nibResources: [T]) {
    nibResources.forEach(registerNib)
  }
  
  func registerNibs<T: NibResource where T: Reusable, T.T: UICollectionReusableView>(nibResources: [T], forSupplementaryViewOfKind kind: String) {
    nibResources.forEach { self.registerNib($0, forSupplementaryViewOfKind: kind) }
  }
}

extension UIViewController {
  convenience init(nib: NibResource) {
    self.init(nibName: nib.name, bundle: _R.hostingBundle)
  }
}

extension UIViewController {
  func performSegueWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>, sender: AnyObject?) {
    performSegueWithIdentifier(identifier.identifier, sender: sender)
  }
}

extension UIStoryboardSegue {
  func typedInfoWithIdentifier<Segue: UIStoryboardSegue,Source: UIViewController,Destination: UIViewController>(identifier: StoryboardSegueIdentifier<Segue, Source, Destination>) -> TypedStoryboardSegueInfo<Segue, Source, Destination>? {
    guard self.identifier == identifier.identifier else { return nil }
    return TypedStoryboardSegueInfo(segue: self)
  }
}